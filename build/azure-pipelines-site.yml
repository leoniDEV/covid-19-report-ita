trigger:
  branches:
    include:
    - master
  paths:
    include:
    - src/Covid19Report.Ita.Views/*
    - src/Covid19Report.Ita.Api/*


pool:
  vmImage: ubuntu-latest
variables:
- name: buildConfiguration
  value: ${{ parameters.configuration }}
- name: pbiGitUrl
  value: 'https://app.powerbi.com/view?r=eyJrIjoiMjY4ODk2Y2MtMWI1Ni00M2MxLTkzNDctMTI0MjVlNTBmMWRlIiwidCI6IjU2MzRjYTUzLTc5NjUtNDAzMC1hMzBlLWE0M2NkOTkzNTMwMCIsImMiOjl9'
- name: pbiCosmosUrl
  value: 'https://app.powerbi.com/view?r=eyJrIjoiNTFmMTIwZTAtMWJiYy00M2I1LWEyMWUtNTNiNzM4OTY5MDViIiwidCI6IjU2MzRjYTUzLTc5NjUtNDAzMC1hMzBlLWE0M2NkOTkzNTMwMCIsImMiOjl9'
- name: pbiReportUrl
  value: $(pbiGitUrl)

parameters:
- name: pbiSource
  type: string
  default: Git
  values:
  - Git
  - Cosmos
- name: configuration
  type: string
  default: Release
  values:
  - Release
  - Debug

stages:
- stage: build
  displayName: Build WebSite
  jobs:
  - job: build
    steps:

    - task: UseDotNet@2
      displayName: Acquire latest .Net 5 SDK
      inputs:
        packageType: 'sdk'
        version: '5.x'
        includePreviewVersions: true

    - task: Npm@1
      inputs:
        workingDir: '$(Build.SourcesDirectory)/src/Covid19Report.Ita.Views'
        command: 'custom'
        customCommand: 'install pnpm'

    - task: DotNetCoreCLI@2
      displayName: Build $(System.TeamProject) $(buildConfiguration)
      inputs:
        command: build
        projects: src/Covid19Report.Ita.Api/*.csproj
        arguments: --configuration $(buildConfiguration) -r linux-x64

    - task: DotNetCoreCLI@2
      displayName: Publish $(System.TeamProject) $(buildConfiguration)
      inputs:
        command: publish
        publishWebProjects: false
        zipAfterPublish: false
        projects: src/Covid19Report.Ita.Api/*.csproj
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) -r linux-x64 /p:PublishTrimmed=true --no-build'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

    - publish: $(Build.ArtifactStagingDirectory)
      displayName: Publish pipeline artifacts
      artifact: reportweb
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
  - stage: deployTest
    displayName: Deploy The web site in test env
    jobs:
    - deployment: Deploy
      environment: Staging
      variables:
        pbiReportUrl: ${{ format('$(pbi{0}Url)', parameters.pbiSource) }}
      strategy:
        runOnce:
          deploy:
            steps:
            - task: FileTransform@2
              inputs:
                folderPath: '$(Pipeline.Workspace)/reportweb/Covid19Report.Ita.Api'
                jsonTargetFiles: appsettings.$(Environment.Name).json
                enableXmlTransform: false
                xmlTransformationRules: ''

            - task: CopyFilesOverSSH@0
              displayName: Upload artifact to Staging
              inputs:
                sshEndpoint: 'SSH-VPS01'
                sourceFolder: '$(Pipeline.Workspace)/reportweb/Covid19Report.Ita.Api'
                contents: '**'
                targetFolder: 'covid19/staging'
                cleanTargetFolder: true
                readyTimeout: '20000'
                overwrite: false

            - task: SSH@0
              displayName: Inizializza la nuova istanza
              inputs:
                sshEndpoint: 'SSH-VPS01'
                runOptions: 'commands'
                commands: 'pwsh -f init.ps1 -project covid19 -stage staging -name Covid19Report.Ita.Api'
                readyTimeout: '20000'

            - task: SSH@0
              displayName: Avvia il servizio
              inputs:
                sshEndpoint: 'SSH-VPS01'
                runOptions: 'commands'
                commands: 'pwsh -f fire.ps1 -project covid19 -stage prod'
                readyTimeout: '20000'

- ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
  - stage: deployProd
    displayName: Deploy The web site in Prod
    jobs:
    - deployment: Deploy
      environment: Production
      strategy:
        runOnce:
          deploy:
            steps:
            - download: none
            - task: SSH@0
              displayName: Promozione Staging to Prod
              inputs:
                sshEndpoint: 'SSH-VPS01'
                runOptions: 'commands'
                commands: 'pwsh -f promote.ps1 -project covid19 -fromStage staging -tostage prod -name Covid19Report.Ita.Api'
                readyTimeout: '20000'

            - task: DownloadPipelineArtifact@2
              displayName: Applica config per PRod env
              inputs:
                buildType: 'current'
                artifactName: 'reportweb'
                itemPattern: 'appsetting.Production.json'
                targetPath: '$(Pipeline.Workspace)/reportweb'

            - task: FileTransform@2
              inputs:
                folderPath: '$(Pipeline.Workspace)/reportweb/Covid19Report.Ita.Api'
                jsonTargetFiles: appsettings.$(Environment.Name).json
                enableXmlTransform: false
                xmlTransformationRules: ''

            - task: CopyFilesOverSSH@0
              displayName: Upload artifact to Production
              inputs:
                sshEndpoint: 'SSH-VPS01'
                sourceFolder: '$(Pipeline.Workspace)/reportweb/Covid19Report.Ita.Api'
                contents: '**'
                targetFolder: 'covid19/prod'
                cleanTargetFolder: true
                readyTimeout: '20000'
                overwrite: false

            - task: SSH@0
              displayName: Avvia il servizio
              inputs:
                sshEndpoint: 'SSH-VPS01'
                runOptions: 'commands'
                commands: 'pwsh -f fire.ps1 -project covid19 -stage prod'
                readyTimeout: '20000'